/**
 * Resize function without multiple trigger
 * 
 * Usage:
 * $(window).smartresize(function(){  
 *     // code here
 * });
 */
(function($,sr){
    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    var debounce = function (func, threshold, execAsap) {
      var timeout;

        return function debounced () {
            var obj = this, args = arguments;
            function delayed () {
                if (!execAsap)
                    func.apply(obj, args); 
                timeout = null; 
            }

            if (timeout)
                clearTimeout(timeout);
            else if (execAsap)
                func.apply(obj, args);

            timeout = setTimeout(delayed, threshold || 100); 
        };
    };

    // smartresize 
    jQuery.fn[sr] = function(fn){  return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr); };

})(jQuery,'smartresize');
var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
    $BODY = $('body'),
    $MENU_TOGGLE = $('#menu_toggle'),
    $SIDEBAR_MENU = $('#sidebar-menu'),
    $SIDEBAR_FOOTER = $('.sidebar-footer'),
    $LEFT_COL = $('.left_col'),
    $RIGHT_COL = $('.right_col'),
    $NAV_MENU = $('.nav_menu'),
    $FOOTER = $('footer');

// Sidebar
$(document).ready(function() {
    // TODO: This is some kind of easy fix, maybe we can improve this
    var setContentHeight = function () {
        // reset height
        $RIGHT_COL.css('min-height', $(window).height());

        var bodyHeight = $BODY.outerHeight(),
            footerHeight = $BODY.hasClass('footer_fixed') ? -10 : $FOOTER.height(),
            leftColHeight = $LEFT_COL.eq(1).height() + $SIDEBAR_FOOTER.height(),
            contentHeight = bodyHeight < leftColHeight ? leftColHeight : bodyHeight;

        // normalize content
        contentHeight -= $NAV_MENU.height() + footerHeight;

        $RIGHT_COL.css('min-height', contentHeight);
    };

    $SIDEBAR_MENU.find('a').on('click', function(ev) {
        var $li = $(this).parent();

        if ($li.is('.active')) {
            $li.removeClass('active active-sm');
            $('ul:first', $li).slideUp(function() {
                setContentHeight();
            });
        } else {
            // prevent closing menu if we are on child menu
            if (!$li.parent().is('.child_menu')) {
                $SIDEBAR_MENU.find('li').removeClass('active active-sm');
                $SIDEBAR_MENU.find('li ul').slideUp();
            }
            
            $li.addClass('active');

            $('ul:first', $li).slideDown(function() {
                setContentHeight();
            });
        }
    });

    // toggle small or large menu
    $MENU_TOGGLE.on('click', function() {
        if ($BODY.hasClass('nav-md')) {
            $SIDEBAR_MENU.find('li.active ul').hide();
            $SIDEBAR_MENU.find('li.active').addClass('active-sm').removeClass('active');
        } else {
            $SIDEBAR_MENU.find('li.active-sm ul').show();
            $SIDEBAR_MENU.find('li.active-sm').addClass('active').removeClass('active-sm');
        }

        $BODY.toggleClass('nav-md nav-sm');

        setContentHeight();

        $('.dataTable').each ( function () { $(this).dataTable().fnDraw(); });
    });

    // check active menu
    $SIDEBAR_MENU.find('a[href="' + CURRENT_URL + '"]').parent('li').addClass('current-page');

    $SIDEBAR_MENU.find('a').filter(function () {
        return this.href == CURRENT_URL;
    }).parent('li').addClass('current-page').parents('ul').slideDown(function() {
        setContentHeight();
    }).parent().addClass('active');

    // recompute content when resizing
    $(window).smartresize(function(){
        setContentHeight();
    });

    setContentHeight();

    // fixed sidebar
    if ($.fn.mCustomScrollbar) {
        $('.menu_fixed').mCustomScrollbar({
            autoHideScrollbar: true,
            theme: 'minimal',
            mouseWheel:{ preventDefault: true }
        });
    }
});
// /Sidebar

// Panel toolbox
$(document).ready(function() {
    $('.collapse-link').on('click', function() {
        var $BOX_PANEL = $(this).closest('.x_panel'),
            $ICON = $(this).find('i'),
            $BOX_CONTENT = $BOX_PANEL.find('.x_content');
        
        // fix for some div with hardcoded fix class
        if ($BOX_PANEL.attr('style')) {
            $BOX_CONTENT.slideToggle(200, function(){
                $BOX_PANEL.removeAttr('style');
            });
        } else {
            $BOX_CONTENT.slideToggle(200); 
            $BOX_PANEL.css('height', 'auto');  
        }

        $ICON.toggleClass('fa-chevron-up fa-chevron-down');
    });

    $('.close-link').click(function () {
        var $BOX_PANEL = $(this).closest('.x_panel');

        $BOX_PANEL.remove();
    });
});
// /Panel toolbox

// Tooltip
$(document).ready(function() {
    $('[data-toggle="tooltip"]').tooltip({
        container: 'body'
    });
});
// /Tooltip

// Progressbar
$(document).ready(function() {
	if ($(".progress .progress-bar")[0]) {
	    $('.progress .progress-bar').progressbar();
	}
});
// /Progressbar

// Switchery
$(document).ready(function() {
    if ($(".js-switch")[0]) {
        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
        elems.forEach(function (html) {
            var switchery = new Switchery(html, {
                color: '#26B99A'
            });
        });
    }
});
// /Switchery

// iCheck
$(document).ready(function() {
    if ($("input.flat")[0]) {
        $(document).ready(function () {
            $('input.flat').iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });
        });
    }
});
// /iCheck

// Table
$('table input').on('ifChecked', function () {
    checkState = '';
    $(this).parent().parent().parent().addClass('selected');
    countChecked();
});
$('table input').on('ifUnchecked', function () {
    checkState = '';
    $(this).parent().parent().parent().removeClass('selected');
    countChecked();
});

var checkState = '';

$('.bulk_action input').on('ifChecked', function () {
    checkState = '';
    $(this).parent().parent().parent().addClass('selected');
    countChecked();
});
$('.bulk_action input').on('ifUnchecked', function () {
    checkState = '';
    $(this).parent().parent().parent().removeClass('selected');
    countChecked();
});
$('.bulk_action input#check-all').on('ifChecked', function () {
    checkState = 'all';
    countChecked();
});
$('.bulk_action input#check-all').on('ifUnchecked', function () {
    checkState = 'none';
    countChecked();
});

function countChecked() {
    if (checkState === 'all') {
        $(".bulk_action input[name='table_records']").iCheck('check');
    }
    if (checkState === 'none') {
        $(".bulk_action input[name='table_records']").iCheck('uncheck');
    }

    var checkCount = $(".bulk_action input[name='table_records']:checked").length;

    if (checkCount) {
        $('.column-title').hide();
        $('.bulk-actions').show();
        $('.action-cnt').html(checkCount + ' Records Selected');
    } else {
        $('.column-title').show();
        $('.bulk-actions').hide();
    }
}

// Accordion
$(document).ready(function() {
    $(".expand").on("click", function () {
        $(this).next().slideToggle(200);
        $expand = $(this).find(">:first-child");

        if ($expand.text() == "+") {
            $expand.text("-");
        } else {
            $expand.text("+");
        }
    });
});

// NProgress
if (typeof NProgress != 'undefined') {
    $(document).ready(function () {
        NProgress.start();
    });

    $(window).on('load', function() {
        NProgress.done();
    });
}

//NBL Test run.
// start 8:46:31 - 31591 since midnight
// end: 15:19:29
// duration: 6:32:58
// duration in seconds: 23578

const missionStartTimeSeconds = 31591;
const missionDurationSeconds = 23578;

var gGreen = [];
var gX = [];
var gXseconds = [];
var gDepth = [];
var gSupplyAirFlow = [];
var gSuitPressure = [];

var gTimer;

$( document ).ready(function() {
    console.log("ready!");

    $.when(ajaxGetGreenSuitData()).done(function () {
        console.log("APPREADY: Ajax loaded");
        mainApplication();
    });

    // var v = document.getElementsByTagName("player0")[0];
    // v.addEventListener("play", function() { startInterval(); }, true);
    //
    // v = document.getElementsByTagName("player0")[0];
    // v.addEventListener("pause", function() { clearInterval(gTimer); }, true);

    document.getElementById("player0").addEventListener("play", function() { startInterval(); }, true);
    document.getElementById("player0").addEventListener("pause", function() { clearInterval(gTimer); }, true);
});

function mainApplication() {
    var slider = document.getElementById("myRange");

    // Update the current slider value (each time you drag the slider handle)
    slider.oninput = function () {
        var sliderMissionSeconds = ((this.value - 1) * missionDurationSeconds) / 99;
        document.getElementById("missionTimeDisplay").innerHTML = secondsToTimeStr(missionStartTimeSeconds + sliderMissionSeconds);

        var closestIndex = findChartIndexByMissionTime(missionStartTimeSeconds + sliderMissionSeconds);
        // console.log(closestIndex);

        Plotly.Fx.hover('chart', [
            {curveNumber: 0, pointNumber: closestIndex},
            {curveNumber: 1, pointNumber: closestIndex},
            {curveNumber: 2, pointNumber: closestIndex}
        ]);
    };

    slider.onmousedown = function() {
        clearInterval(gTimer);
    };

    slider.onmouseup = function() {
        console.log("range changed");

        var sliderMissionSeconds = ((this.value - 1) * missionDurationSeconds) / 99;

        document.getElementById("player0").currentTime = sliderMissionSeconds;

        startInterval();
    };
}

function startInterval() {
    clearInterval(gTimer);
    gTimer = setInterval(function(){
        var missionSeconds = document.getElementById("player0").currentTime;
        document.getElementById("missionTimeDisplay").innerHTML = secondsToTimeStr(missionStartTimeSeconds + missionSeconds);
        document.getElementById("myRange").value = (missionSeconds * 100) / missionDurationSeconds;
        // console.log(document.getElementById("myRange").value);

        var closestIndex = findChartIndexByMissionTime(missionStartTimeSeconds + missionSeconds);
        Plotly.Fx.hover('chart', [
            {curveNumber: 0, pointNumber: closestIndex},
            {curveNumber: 1, pointNumber: closestIndex},
            {curveNumber: 2, pointNumber: closestIndex}
        ]);
    },500);
}

function play() {
    document.getElementById("player0").play();
    startInterval();
}
function pause() {
    clearInterval(gTimer);
    document.getElementById("player0").pause();
}

function findChartIndexByMissionTime(seconds) {
    for (var i=0; i < gX.length; i++) {
        var curSeconds = gXseconds[i];
        // console.log("curseconds: " + curSeconds + " slider seconds: " + seconds);
        if (curSeconds > seconds) {
            var closestIndex = i - 1;
            break;
        }
    }
    return closestIndex;
}


function ajaxGetGreenSuitData() {
    var urlStr = "../graph/green.csv";
    return $.ajax({
        type: "GET",
        url: urlStr,
        dataType: "text",
        success: function(data) {processGreenSuitData(data);}
    });
}

function processGreenSuitData(allText) {
    //console.log("processProductData");
    var allTextLines = allText.split(/\r\n|\n/);
    for (var i = 1; i < allTextLines.length; i++) {
        var data = allTextLines[i].split('|');
        gGreen.push(data);
    }
    convertToChartData();

    var depthTrace = {
        x:gX,
        y:gDepth,
        type: 'line',
        line: {
            color: '#21910F'
        },
        name: 'Depth (feet)'
    };

    var airflowTrace = {
        x:gX,
        y:gSupplyAirFlow,
        type: 'line',
        line: {
            color: '#171791'
        },
        name: 'Supply Air Flow (ACFM)'
    };

    var suitPressureTrace = {
        x:gX,
        y:gSuitPressure,
        type: 'line',
        line: {
            color: '#911b28'
        },
        name: 'Suit Pressure (psi)'
    };

    Plotly.newPlot('chart', [depthTrace, airflowTrace, suitPressureTrace], {
        autosize: true,
        height: 300,
        // width: '100%',
        showlegend: false,
        // title: 'EV2 Suit Data',
        xaxis: {
            // range: [0, 50],
            showgrid: true,
            zeroline: false,
            showline: false,
            autotick: true,
            ticks: '',
            showticklabels: true,
            hoverinfo: 'y',
            hoverformat: '.2r'
        },
        margin: {
            t: 20, //top margin
            l: 20, //left margin
            r: 20, //right margin
            b: 20 //bottom margin
        }
    });

    var myPlot = document.getElementById("chart");
    myPlot.on('plotly_click', function(data){
        var clickMissionTime = data.points[0].x;
        var clickMissionTimeSeconds = timeStrToSeconds(clickMissionTime) - missionStartTimeSeconds;
        document.getElementById("player0").currentTime = clickMissionTimeSeconds;

        startInterval();
    });

    // Plotly.Fx.hover('chart', [
    //     {curveNumber: 0, pointNumber: 25},
    //     {curveNumber: 1, pointNumber: 25},
    //     {curveNumber: 2, pointNumber: 25}
    //
    // ]);
}

function convertToChartData() {
    for (var i = 0; i < gGreen.length; i++){
        gX.push(gGreen[i][1]);
        gXseconds.push(timeStrToSeconds(gGreen[i][1]));
        gDepth.push(gGreen[i][2]);
        gSupplyAirFlow.push(gGreen[i][3]);
        gSuitPressure.push(gGreen[i][9]);
    }
}

function secondsToTimeStr(totalSeconds) {
    var hours = Math.abs(parseInt(totalSeconds / 3600));
    var minutes = Math.abs(parseInt(totalSeconds / 60)) % 60 % 60;
    var seconds = Math.abs(parseInt(totalSeconds)) % 60;
    seconds = Math.floor(seconds);
    var timeStr = padZeros(hours,2) + ":" + padZeros(minutes,2) + ":" + padZeros(seconds,2);
    if (totalSeconds < 0) {
        timeStr = "-" + timeStr.substr(1); //change timeStr to negative, replacing leading zero in hours with "-"
    }
    return timeStr;
}

function timeStrToSeconds(timeStr) {
    var sign = timeStr.substr(0,1);
    var hours = parseInt(timeStr.substr(0,2));
    var minutes = parseInt(timeStr.substr(3,2));
    var seconds = parseInt(timeStr.substr(6,2));
    var signToggle = (sign == "-") ? -1 : 1;
    var totalSeconds = Math.round(signToggle * ((Math.abs(hours) * 60 * 60) + (minutes * 60) + seconds));

    return totalSeconds;
}

function padZeros(num, size) {
    var s = num + "";
    while (s.length < size) s = "0" + s;
    return s;
}